{"google":"","name":"Kengai","body":"# Kengai\r\n\r\n![Kengai](https://raw.github.com/jcambien/kengai/master/kengai.png)\r\n\r\nKengai is a simple but powerful configuration tool for your PHP applications.\r\n\r\nThis is a work in progress, do NOT use it in production environment.\r\nAlso, please note that documentation is not done but in progress.\r\n\r\nAnybody is welcome to help and contribute to this project.\r\n\r\n\r\n## About this project\r\n\r\nThe idea is simple :\r\n- Manage configurations from any formats with a tree structure (YAML, JSON, INI, etc.) in a simple and optimized way.\r\n- All data are stored in a common tree ordered by namespaces.\r\n- The possibility to use any cache system (like APC).\r\n- Event system for advanced use cases, powered by the Symfony 2 event dispatcher component. \r\n\r\n\r\n## Basics\r\n\r\nHere is a example of a basic use case:\r\n\r\n```php\r\n<?php\r\n\r\nuse Kengai\\Manager as Kengai;\r\nuse Kengai\\SourceReader\\YAML;\r\n \r\n// Create a Kengai manager instance\r\n$kengai = new Kengai();\r\n \r\n// Import your configuration files\r\n$kengai->add(new YAML('myconfig.yml', 'myconfig'));\r\n \r\n// Example of JSON support\r\n$kengai->add(new YAML('composer.json', 'composer'));\r\n \r\n// Fetch data\r\n$kengai->fetch();","tagline":"Configuration tool for your PHP applications","note":"Don't delete this file! It's used internally to help with page regeneration."}